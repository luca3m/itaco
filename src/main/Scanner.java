/* The following code was generated by JFlex 1.4.3 on 12/03/12 17:28 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2009  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
 It is in fact quite slow on integer and floating point literals, 
 because the input is read twice and the methods used to parse
 the numbers are not very fast. 
 For a production quality application (e.g. a Java compiler) 
 this could be optimized */

package main;

import edu.tum.cup2.grammar.SpecialTerminals;
import edu.tum.cup2.scanner.ScannerToken;
import static main.ParserSpec.Terminals.*;

@SuppressWarnings("unused")
/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/03/12 17:28 from the specification file
 * <tt>/Users/luca/Sviluppo/itaco/src/main/Scanner.flex</tt>
 */
public class Scanner implements edu.tum.cup2.scanner.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\0"
			+ "\1\11\1\4\1\5\2\0\1\12\1\36\1\37\1\51\1\50\1\42"
			+ "\1\46\1\43\1\52\1\7\11\10\1\35\1\45\1\54\1\53\1\47"
			+ "\2\0\32\5\1\40\1\13\1\41\1\0\1\5\1\0\1\14\1\55"
			+ "\1\27\1\5\1\22\1\26\1\31\1\30\1\20\2\5\1\15\1\21"
			+ "\1\23\1\24\2\5\1\17\1\25\1\16\1\33\1\32\3\5\1\34"
			+ "\1\0\1\44\2\0\41\6\2\0\4\5\4\0\1\5\2\0\1\6"
			+ "\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u013f\5"
			+ "\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5\21\0\130\6"
			+ "\5\0\23\6\12\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5"
			+ "\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5"
			+ "\1\0\4\6\3\0\105\5\1\0\46\5\2\0\2\5\6\0\20\5"
			+ "\41\0\46\5\2\0\1\5\7\0\47\5\11\0\21\6\1\0\27\6"
			+ "\1\0\3\6\1\0\1\6\1\0\2\6\1\0\1\6\13\0\33\5"
			+ "\5\0\3\5\15\0\4\6\14\0\6\6\13\0\32\5\5\0\13\5"
			+ "\16\6\7\0\12\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"
			+ "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"
			+ "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\3\5\60\0"
			+ "\46\5\13\6\1\5\u014f\0\3\6\66\5\2\0\1\6\1\5\20\6"
			+ "\2\0\1\5\4\6\3\0\12\5\2\6\2\0\12\6\21\0\3\6"
			+ "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"
			+ "\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6"
			+ "\11\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5"
			+ "\15\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"
			+ "\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6"
			+ "\4\0\2\6\2\0\3\6\13\0\4\5\1\0\1\5\7\0\14\6"
			+ "\3\5\14\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"
			+ "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"
			+ "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"
			+ "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"
			+ "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\6\6"
			+ "\3\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"
			+ "\4\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5\3\0"
			+ "\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"
			+ "\2\5\3\0\3\5\3\0\10\5\1\0\3\5\4\0\5\6\3\0"
			+ "\3\6\1\0\4\6\11\0\1\6\17\0\11\6\11\0\1\5\7\0"
			+ "\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"
			+ "\5\5\4\0\7\6\1\0\3\6\1\0\4\6\7\0\2\6\11\0"
			+ "\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0"
			+ "\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0"
			+ "\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\4\0"
			+ "\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0"
			+ "\20\5\4\0\6\6\2\0\3\6\1\0\4\6\11\0\1\6\10\0"
			+ "\2\5\4\0\12\6\22\0\2\6\1\0\22\5\3\0\30\5\1\0"
			+ "\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6\1\0"
			+ "\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5\7\6"
			+ "\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5\2\0"
			+ "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"
			+ "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\6"
			+ "\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0"
			+ "\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0\2\6\6\0"
			+ "\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5"
			+ "\1\0\42\5\6\0\24\6\1\0\2\6\4\5\4\0\10\6\1\0"
			+ "\44\6\11\0\1\6\71\0\42\5\1\0\5\5\1\0\2\5\1\0"
			+ "\7\6\3\0\4\6\6\0\12\6\6\0\6\5\4\6\106\0\46\5"
			+ "\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5\6\0\7\5"
			+ "\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5"
			+ "\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5\2\0\37\5"
			+ "\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"
			+ "\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5\1\0\1\5"
			+ "\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5\16\0\11\6"
			+ "\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0\113\5"
			+ "\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6"
			+ "\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0"
			+ "\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0"
			+ "\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6\126\0\35\5"
			+ "\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\u038b\0"
			+ "\154\5\224\0\234\5\4\0\132\5\6\0\26\5\2\0\6\5\2\0"
			+ "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"
			+ "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"
			+ "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"
			+ "\3\5\1\0\7\5\17\0\4\6\32\0\5\6\20\0\2\5\23\0"
			+ "\1\5\13\0\4\6\6\0\6\6\1\0\1\5\15\0\1\5\40\0"
			+ "\22\5\36\0\15\6\4\0\1\6\3\0\6\6\27\0\1\5\4\0"
			+ "\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0"
			+ "\1\5\1\0\1\5\1\0\4\5\1\0\3\5\1\0\7\5\3\0"
			+ "\3\5\5\0\5\5\26\0\44\5\u0e81\0\3\5\31\0\11\5\6\6"
			+ "\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5"
			+ "\1\0\137\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0\20\5"
			+ "\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5"
			+ "\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5"
			+ "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"
			+ "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"
			+ "\3\0\20\6\20\0\4\6\17\0\2\5\30\0\3\5\31\0\1\5"
			+ "\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6"
			+ "\7\0\32\5\4\0\1\5\1\0\32\5\12\0\132\5\3\0\6\5"
			+ "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5" + "\22\0\3\6\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\3\2\1\3\2\4\1\5\6\3\1\6"
			+ "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\2\27\1\30\1\1\3\3\1\31\4\3\1\32\1\33"
			+ "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"
			+ "\17\3\1\44\6\3\1\45\1\46\1\47\4\3\1\50" + "\1\3\1\51\1\3\1\52";

	private static int[] zzUnpackAction() {
		int[] result = new int[89];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\56\0\134\0\212\0\134\0\270\0\346\0\134"
			+ "\0\u0114\0\134\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228"
			+ "\0\134\0\134\0\134\0\134\0\134\0\134\0\134\0\134"
			+ "\0\134\0\u0256\0\134\0\134\0\134\0\134\0\134\0\134"
			+ "\0\u0284\0\u02b2\0\134\0\134\0\u02e0\0\u030e\0\u033c\0\u036a"
			+ "\0\346\0\u0398\0\u03c6\0\u03f4\0\u0422\0\134\0\134\0\134"
			+ "\0\134\0\134\0\134\0\134\0\134\0\134\0\134\0\u0450"
			+ "\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0"
			+ "\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\346\0\u0702"
			+ "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\346\0\346\0\346"
			+ "\0\u0816\0\u0844\0\u0872\0\u08a0\0\346\0\u08ce\0\346\0\u08fc"
			+ "\0\346";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[89];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\2\5\1\6\1\7\1\3\1\10\1\11"
			+ "\1\12\2\3\1\13\1\14\2\7\1\15\4\7\1\16"
			+ "\1\17\3\7\1\20\2\7\1\21\1\22\1\23\1\24"
			+ "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"
			+ "\1\35\1\36\1\37\1\40\1\7\1\41\1\42\1\43"
			+ "\6\41\1\44\1\41\1\45\42\41\60\0\1\5\53\0"
			+ "\1\6\1\4\1\5\53\6\5\0\4\7\3\0\21\7"
			+ "\20\0\1\7\7\0\2\11\52\0\4\7\3\0\1\7"
			+ "\1\46\17\7\20\0\1\7\5\0\4\7\3\0\6\7"
			+ "\1\47\12\7\20\0\1\7\5\0\4\7\3\0\7\7"
			+ "\1\50\11\7\20\0\1\7\5\0\4\7\3\0\6\7"
			+ "\1\51\4\7\1\52\5\7\20\0\1\7\5\0\4\7"
			+ "\3\0\4\7\1\53\12\7\1\54\1\7\20\0\1\7"
			+ "\5\0\4\7\3\0\6\7\1\55\12\7\20\0\1\7"
			+ "\47\0\1\56\6\0\1\41\2\0\6\41\1\0\1\41"
			+ "\1\0\42\41\2\0\1\43\53\0\2\57\1\0\6\57"
			+ "\1\60\1\61\1\62\2\57\1\63\1\64\3\57\1\65"
			+ "\2\57\1\66\26\57\1\67\5\0\4\7\3\0\2\7"
			+ "\1\70\16\7\20\0\1\7\5\0\4\7\3\0\15\7"
			+ "\1\71\3\7\20\0\1\7\5\0\4\7\3\0\2\7"
			+ "\1\72\16\7\20\0\1\7\5\0\4\7\3\0\3\7"
			+ "\1\73\15\7\20\0\1\7\5\0\4\7\3\0\7\7"
			+ "\1\74\11\7\20\0\1\7\5\0\4\7\3\0\7\7"
			+ "\1\75\11\7\20\0\1\7\5\0\4\7\3\0\2\7"
			+ "\1\76\16\7\20\0\1\7\5\0\4\7\3\0\3\7"
			+ "\1\77\15\7\20\0\1\7\5\0\4\7\3\0\15\7"
			+ "\1\100\3\7\20\0\1\7\5\0\4\7\3\0\6\7"
			+ "\1\101\12\7\20\0\1\7\5\0\4\7\3\0\4\7"
			+ "\1\102\14\7\20\0\1\7\5\0\4\7\3\0\13\7"
			+ "\1\103\5\7\20\0\1\7\5\0\4\7\3\0\20\7"
			+ "\1\104\20\0\1\7\5\0\4\7\3\0\2\7\1\105"
			+ "\16\7\20\0\1\7\5\0\4\7\3\0\4\7\1\106"
			+ "\14\7\20\0\1\7\5\0\4\7\3\0\4\7\1\107"
			+ "\14\7\20\0\1\7\5\0\4\7\3\0\3\7\1\110"
			+ "\15\7\20\0\1\7\5\0\4\7\3\0\16\7\1\111"
			+ "\2\7\20\0\1\7\5\0\4\7\3\0\14\7\1\112"
			+ "\4\7\20\0\1\7\5\0\4\7\3\0\4\7\1\113"
			+ "\14\7\20\0\1\7\5\0\4\7\3\0\10\7\1\114"
			+ "\10\7\20\0\1\7\5\0\4\7\3\0\5\7\1\115"
			+ "\13\7\20\0\1\7\5\0\4\7\3\0\10\7\1\116"
			+ "\10\7\20\0\1\7\5\0\4\7\3\0\4\7\1\117"
			+ "\14\7\20\0\1\7\5\0\4\7\3\0\6\7\1\120"
			+ "\12\7\20\0\1\7\5\0\4\7\3\0\10\7\1\121"
			+ "\10\7\20\0\1\7\5\0\4\7\3\0\3\7\1\122"
			+ "\15\7\20\0\1\7\5\0\4\7\3\0\6\7\1\123"
			+ "\12\7\20\0\1\7\5\0\4\7\3\0\7\7\1\124"
			+ "\11\7\20\0\1\7\5\0\4\7\3\0\6\7\1\125"
			+ "\12\7\20\0\1\7\5\0\4\7\3\0\7\7\1\126"
			+ "\11\7\20\0\1\7\5\0\4\7\3\0\6\7\1\127"
			+ "\12\7\20\0\1\7\5\0\4\7\3\0\2\7\1\130"
			+ "\16\7\20\0\1\7\5\0\4\7\3\0\4\7\1\131" + "\14\7\20\0\1\7";

	private static int[] zzUnpackTrans() {
		int[] result = new int[2346];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"
			+ "\6\1\11\11\1\1\6\11\2\1\2\11\11\1\12\11" + "\42\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[89];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	StringBuffer string = new StringBuffer();

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Scanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Scanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 1746) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public ScannerToken<Object> readNextTerminal() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 2: { /* ignore */
			}
			case 43:
				break;
			case 34: {
				string.append('\f');
			}
			case 44:
				break;
			case 24: {
				yybegin(YYINITIAL);
				return new ScannerToken<Object>(STRINGA, string.toString(),
						yyline + 1, yycolumn);
			}
			case 45:
				break;
			case 35: {
				string.append('\b');
			}
			case 46:
				break;
			case 21: {
				return new ScannerToken<Object>(MINORE, yyline + 1, yycolumn);
			}
			case 47:
				break;
			case 36: {
				return new ScannerToken<Object>(LEGGI, yyline + 1, yycolumn);
			}
			case 48:
				break;
			case 20: {
				return new ScannerToken<Object>(UGUALE, yyline + 1, yycolumn);
			}
			case 49:
				break;
			case 31: {
				string.append('\t');
			}
			case 50:
				break;
			case 16: {
				return new ScannerToken<Object>(MAGGIORE, yyline + 1, yycolumn);
			}
			case 51:
				break;
			case 29: {
				string.append('\'');
			}
			case 52:
				break;
			case 25: {
				return new ScannerToken<Object>(SE, yyline + 1, yycolumn);
			}
			case 53:
				break;
			case 42: {
				return new ScannerToken<Object>(ALTRIMENTI, yyline + 1,
						yycolumn);
			}
			case 54:
				break;
			case 13: {
				return new ScannerToken<Object>(PIPE, yyline + 1, yycolumn);
			}
			case 55:
				break;
			case 23: {
				throw new RuntimeException("Unterminated string at end of line");
			}
			case 56:
				break;
			case 7: {
				return new ScannerToken<Object>(PARENTESI_TONDA_APERTA,
						yyline + 1, yycolumn);
			}
			case 57:
				break;
			case 14: {
				return new ScannerToken<Object>(PUNTO_VIRGOLA, yyline + 1,
						yycolumn);
			}
			case 58:
				break;
			case 18: {
				return new ScannerToken<Object>(PRODOTTO, yyline + 1, yycolumn);
			}
			case 59:
				break;
			case 8: {
				return new ScannerToken<Object>(PARENTESI_TONDA_CHIUSA,
						yyline + 1, yycolumn);
			}
			case 60:
				break;
			case 3: {
				return new ScannerToken<Object>(IDENTIFICATORE, yytext(),
						yyline + 1, yycolumn);
			}
			case 61:
				break;
			case 37: {
				return new ScannerToken<Object>(INTERO, yyline + 1, yycolumn);
			}
			case 62:
				break;
			case 40: {
				return new ScannerToken<Object>(VETTORE, yyline + 1, yycolumn);
			}
			case 63:
				break;
			case 4: {
				return new ScannerToken<Object>(NUMERO_INTERO,
						Integer.valueOf(yytext()), yyline + 1, yycolumn);
			}
			case 64:
				break;
			case 9: {
				return new ScannerToken<Object>(PARENTESI_QUADRA_APERTA,
						yyline + 1, yycolumn);
			}
			case 65:
				break;
			case 28: {
				string.append('\"');
			}
			case 66:
				break;
			case 41: {
				return new ScannerToken<Object>(FUNZIONE, yyline + 1, yycolumn);
			}
			case 67:
				break;
			case 10: {
				return new ScannerToken<Object>(PARENTESI_QUADRA_CHIUSA,
						yyline + 1, yycolumn);
			}
			case 68:
				break;
			case 11: {
				return new ScannerToken<Object>(VIRGOLA, yyline + 1, yycolumn);
			}
			case 69:
				break;
			case 6: {
				return new ScannerToken<Object>(DUE_PUNTI, yyline + 1, yycolumn);
			}
			case 70:
				break;
			case 32: {
				string.append('\r');
			}
			case 71:
				break;
			case 5: {
				yybegin(STRING);
				string.setLength(0);
			}
			case 72:
				break;
			case 30: {
				string.append('\\');
			}
			case 73:
				break;
			case 15: {
				return new ScannerToken<Object>(SOTTRAZIONE, yyline + 1,
						yycolumn);
			}
			case 74:
				break;
			case 38: {
				return new ScannerToken<Object>(SCRIVI, yyline + 1, yycolumn);
			}
			case 75:
				break;
			case 26: {
				return new ScannerToken<Object>(ASSEGNAZIONE, yyline + 1,
						yycolumn);
			}
			case 76:
				break;
			case 19: {
				return new ScannerToken<Object>(DIVISIONE, yyline + 1, yycolumn);
			}
			case 77:
				break;
			case 33: {
				string.append('\n');
			}
			case 78:
				break;
			case 39: {
				return new ScannerToken<Object>(FINCHE, yyline + 1, yycolumn);
			}
			case 79:
				break;
			case 1: {
				throw new RuntimeException("Illegal character \"" + yytext()
						+ "\" at line " + yyline + 1 + ", column " + yycolumn);
			}
			case 80:
				break;
			case 22: {
				string.append(yytext());
			}
			case 81:
				break;
			case 12: {
				return new ScannerToken<Object>(PUNTO, yyline + 1, yycolumn);
			}
			case 82:
				break;
			case 27: {
				throw new RuntimeException("Illegal escape sequence \""
						+ yytext() + "\"");
			}
			case 83:
				break;
			case 17: {
				return new ScannerToken<Object>(SOMMA, yyline + 1, yycolumn);
			}
			case 84:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						return new ScannerToken<Object>(
								SpecialTerminals.EndOfInputStream);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
